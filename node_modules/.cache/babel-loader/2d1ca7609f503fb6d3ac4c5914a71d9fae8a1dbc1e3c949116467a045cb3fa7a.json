{"ast":null,"code":"var _jsxFileName = \"/Users/achen1076/Desktop/3606/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { getCurrentUser, logout, isAuthenticated } from '../services/authService.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check authentication status on mount\n    const checkAuth = () => {\n      if (isAuthenticated()) {\n        const currentUser = getCurrentUser();\n        setUser(currentUser);\n        setIsLoggedIn(true);\n      } else {\n        setUser(null);\n        setIsLoggedIn(false);\n      }\n    };\n    checkAuth();\n\n    // Set up event listener for storage changes (for multi-tab support)\n    const handleStorageChange = () => {\n      checkAuth();\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  const handleLogout = () => {\n    logout();\n    setUser(null);\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoggedIn,\n      logout: handleLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"4bYv/j5yOMazbJb4xFyUTJyGHFM=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","getCurrentUser","logout","isAuthenticated","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoggedIn","setIsLoggedIn","checkAuth","currentUser","handleStorageChange","window","addEventListener","removeEventListener","handleLogout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/achen1076/Desktop/3606/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { getCurrentUser, logout, isAuthenticated } from '../services/authService.ts';\n\ninterface User {\n  id: string;\n  username: string;\n  role: 'admin' | 'member';\n  displayName: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoggedIn: boolean;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n\n  useEffect(() => {\n    // Check authentication status on mount\n    const checkAuth = () => {\n      if (isAuthenticated()) {\n        const currentUser = getCurrentUser();\n        setUser(currentUser);\n        setIsLoggedIn(true);\n      } else {\n        setUser(null);\n        setIsLoggedIn(false);\n      }\n    };\n\n    checkAuth();\n    \n    // Set up event listener for storage changes (for multi-tab support)\n    const handleStorageChange = () => {\n      checkAuth();\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  const handleLogout = () => {\n    logout();\n    setUser(null);\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoggedIn, logout: handleLogout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AACxF,SAASC,cAAc,EAAEC,MAAM,EAAEC,eAAe,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAerF,MAAMC,WAAW,gBAAGT,aAAa,CAA8BU,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAU,KAAK,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,SAAS,GAAGA,CAAA,KAAM;MACtB,IAAIZ,eAAe,CAAC,CAAC,EAAE;QACrB,MAAMa,WAAW,GAAGf,cAAc,CAAC,CAAC;QACpCW,OAAO,CAACI,WAAW,CAAC;QACpBF,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,MAAM;QACLF,OAAO,CAAC,IAAI,CAAC;QACbE,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;;IAEX;IACA,MAAME,mBAAmB,GAAGA,CAAA,KAAM;MAChCF,SAAS,CAAC,CAAC;IACb,CAAC;IAEDG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEF,mBAAmB,CAAC;IAEvD,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEH,mBAAmB,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACzBnB,MAAM,CAAC,CAAC;IACRU,OAAO,CAAC,IAAI,CAAC;IACbE,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,IAAI;MAAEE,UAAU;MAAEX,MAAM,EAAEmB;IAAa,CAAE;IAAAZ,QAAA,EACrEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjB,EAAA,CA1CWF,YAA+C;AAAAoB,EAAA,GAA/CpB,YAA+C;AA4C5D,OAAO,MAAMqB,OAAO,GAAGA,CAAA,KAAuB;EAAAC,GAAA;EAC5C,MAAMC,OAAO,GAAGjC,UAAU,CAACQ,WAAW,CAAC;EACvC,IAAIyB,OAAO,KAAKxB,SAAS,EAAE;IACzB,MAAM,IAAIyB,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}