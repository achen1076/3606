{"ast":null,"code":"var _jsxFileName = \"/Users/achen1076/Desktop/3606/src/components/templates/ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext.tsx';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requireAdmin = false\n}) => {\n  _s();\n  const {\n    isLoggedIn,\n    user\n  } = useAuth();\n  if (!isLoggedIn) {\n    // Redirect to login if not authenticated\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If admin access is required, check user role\n  if (requireAdmin && (user === null || user === void 0 ? void 0 : user.role) !== 'admin') {\n    // Redirect to home if not an admin\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  // User is authenticated and has proper permissions\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(ProtectedRoute, \"PPtwCNEb4Z856qcanUNLH+rHYnk=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","requireAdmin","_s","isLoggedIn","user","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","role","_c","$RefreshReg$"],"sources":["/Users/achen1076/Desktop/3606/src/components/templates/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext.tsx';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requireAdmin?: boolean;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \n  children, \n  requireAdmin = false \n}) => {\n  const { isLoggedIn, user } = useAuth();\n  \n  if (!isLoggedIn) {\n    // Redirect to login if not authenticated\n    return <Navigate to=\"/login\" replace />;\n  }\n  \n  // If admin access is required, check user role\n  if (requireAdmin && user?.role !== 'admin') {\n    // Redirect to home if not an admin\n    return <Navigate to=\"/\" replace />;\n  }\n  \n  // User is authenticated and has proper permissions\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAOzD,MAAMC,cAA6C,GAAGA,CAAC;EACrDC,QAAQ;EACRC,YAAY,GAAG;AACjB,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC,UAAU;IAAEC;EAAK,CAAC,GAAGV,OAAO,CAAC,CAAC;EAEtC,IAAI,CAACS,UAAU,EAAE;IACf;IACA,oBAAOP,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,IAAIT,YAAY,IAAI,CAAAG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,IAAI,MAAK,OAAO,EAAE;IAC1C;IACA,oBAAOf,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,oBAAOd,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACE,EAAA,CAnBIH,cAA6C;EAAA,QAIpBL,OAAO;AAAA;AAAAkB,EAAA,GAJhCb,cAA6C;AAqBnD,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}